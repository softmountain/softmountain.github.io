{"meta":{"title":"沉思之地","subtitle":"虽说人类一思考,上帝就发笑,但是人类不思考,上帝连发笑都不屑","description":"HUT/ACMer","author":"softmountain","url":"http://yoursite.com","root":"/"},"posts":[{"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"title":"基本数据结构 KMP模式匹配","date":"2020/04/17","text":"KMP匹配是判断两个线性表之间是否存在子母串关系的算法，并且能够定位到子串所处的位置 步骤1 .首先对小的字符串A进行自我”匹配”，设置next数组，其中next[i]表示“A中以a[i]结尾的非前缀子串”与”A的前缀”所能匹配到的最大长度 公式： next[i]=max{j},其中j&lt;i并且A[i-j+1 ~ i]==A[1 ~ j] 特别的：当不存在这样的 j 时，令next[i]=0 2 .对字符串A和B进行匹配，求出一个数组f，其中f[i]表示“B中以i结尾的字串”与”A的前缀”能够匹配到的最大长度 公式： f[i]=max{j},其中j&lt;i并且B[i-j+1 ~i]==A[1 ~ j] 当j的长度超过了n时，应该把j=next[j]; 引理对于j&lt;i,则j是next[i]的一个候选项，则小于j的next[i]的最大候选项是next[j],这是一个套娃的关系，直到满足条件或者next[j]==0 代码12345678910111213141516//next数组的求法next[1]=0;for(int i=2,j=0;i&lt;=n;i++)&#123; while(j&gt;0&amp;&amp;a[i]!=a[j+1]) j=next[j]; //找到符合条件的j,或者j==0; if(a[i]==a[j+1]) j++; //如果符合条件，加上末尾的元素 next[i]=j;&#125;//f数组的求法（大同小异）for(int i=1,j=0;i&lt;=m;i++)&#123; while(j&gt;0&amp;&amp;(j==n||b[i]!=a[j+1])) j=next[j]; if(b[i]==a[j+1]) j++; f[i]=j; //当f[i]==n的时候，说明子串就出现了&#125; 例题链接：POJ1961 题意：求循环元，首先我们设s[1~i]拥有长度为len的循环元 那么len必定满足以下条件： len|i &amp;&amp; s[len+1i]==s[1i-len] 而最小循环节则满足 s[len] (最小循环节)=next[i] 综上，得到代码 1234567891011121314151617181920void calc_next()&#123; next[1]=0; for(int i=2;j=0;i&lt;=n;i++)&#123; while(j&gt;0&amp;&amp;a[j+1]!=a[i]) j=next[j]; if(a[j+1]==a[i]) j++; next[i]=j; &#125;&#125;int main()&#123; while(cin&gt;&gt;n&gt;&gt;m)&#123; scanf(\"%s\",a+1); calc_next(); cout&lt;&lt;\"Test case\"&lt;&lt;++T&lt;&lt;endl; for(int i=2;i&lt;=n;i++)&#123; if(i%(i-next[i])==0&amp;&amp;i/(i-next[i])&gt;1)&#123; cout&lt;&lt;i&lt;&lt;\" \"&lt;&lt;i/(i-next[i])&lt;&lt;endl; &#125; &#125; &#125;&#125;","permalink":"http://yoursite.com/2020/04/17/%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-KMP%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/","photos":[]},{"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://yoursite.com/tags/codeforces/"}],"title":"CF每日一题 四月","date":"2020/04/17","text":"","permalink":"http://yoursite.com/2020/04/17/CF%E6%AF%8F%E6%97%A5%E4%B8%80%E9%A2%98-%E5%9B%9B%E6%9C%88/","photos":[]},{"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://yoursite.com/tags/codeforces/"}],"title":"codeforces round 633 div.2&& round 634 div.3回顾","date":"2020/04/15","text":"codeforces上的比赛一直都很多，索性一次性将有价值的题目全部都放到一起来写了 round 633D题题意：给定指定的n个点，n-1条无向路（也就是说没有成环的可能），可以给路径随机分配正权值，从一个叶节点走到另外的叶节点路途中，所途径权值异或之和应该为零，问权值数量最少为多少，最多为多少 分析：首先我们先判断最小值的情况，我们可以发现，如果存在有两个节点之间的边数为奇数，那么权值的种类最小数必定为三，然后再去判断最大值的情况，两个或者两个以上叶节点同时连在了一个点上的情况中，这几个叶结点的权值边应该全部相同，所以只需要保留一个就可以了，把删掉的节点数用一个数字存起来，最大值就是 n-1-该数字 123456789101112131415161718192021222324252627282930313233343536373839404142const int N=1e5+7;int t,n,m,ans=0,fl=0;vector&lt;int&gt; v[100005],one;int qi=0;void dfs(int x,int y,int z)&#123; int aa=0; if(ans) return ; if(y!=-1&amp;&amp;v[x].size()==1)&#123; //从所有的叶节点出发，到其他的的叶节点，判断路径的奇偶 if(z%2) ans=1; return ; &#125; rep(i,0,v[x].size()-1)&#123; if(v[x][i]==y) continue; dfs(v[x][i],x,z+1); &#125; return ;&#125; int main()&#123; scanf(\"%d\",&amp;n); int minn=0,maxn=n-1; rep(i,1,n-1)&#123; int a,b; scanf(\"%d%d\",&amp;a,&amp;b); v[a].push_back(b); v[b].push_back(a); &#125; rep(i,1,n)&#123; if(v[i].size()==1&amp;&amp;qi==0)&#123; qi=i; &#125; int cnt=0; rep(j,0,v[i].size()-1)&#123; //删除多余叶节点 if(v[v[i][j]].size()==1) cnt++; &#125; if(cnt&gt;=2) fl+=cnt-1; &#125; dfs(qi,-1,0); if(ans==0) minn=1; else minn=3; maxn-=fl; printf(\"%d %d\\n\",minn,maxn); round 634E1题题意：给定一个数组，问在不改变顺序的情况下，通过删减数组中元素，使得数组变成’ABA’型回文串是否可能，如果可能，请输出最大的回文串的长度 分析：dp题，用数组从左往右遍历，用a[i] [j]表示当前位置 j 情况下字符 i 的数量，然后再用从每一个位置开始， 以当前位置为左端，设置右端，再遍历26个字母的存在，使得 maxin=max(maxin,a[i] [r+1]-a[i] [l]); maxout=max(maxout,min(a[i] [l],a[i] [n]-a[i] [r+1])*2); 12345678910111213141516171819202122232425262728293031#define sz(a) int((a).size())#define forn(i, n) for (int i = 0; i &lt; int(n); ++i)#define fore(i, l, r) for (int i = int(l); i &lt; int(r); ++i)int main() &#123; int t; cin &gt;&gt; t; while (t--) &#123; int n; cin &gt;&gt; n; vector&lt;int&gt; a(n); for (auto &amp;it : a) cin &gt;&gt; it; vector&lt;vector&lt;int&gt;&gt; cnt(26, vector&lt;int&gt;(n + 1)); forn(i, n) &#123; forn(j, 26) cnt[j][i + 1] = cnt[j][i]; ++cnt[a[i] - 1][i + 1]; &#125; int ans = 0; forn(i, 26) ans = max(ans, cnt[i][n - 1]); forn(l, n) fore(r, l, n) &#123; int cntin = 0, cntout = 0; forn(el, 26) &#123; cntin = max(cntin, cnt[el][r + 1] - cnt[el][l]); cntout = max(cntout, min(cnt[el][l], cnt[el][n] - cnt[el][r + 1]) * 2); &#125; ans = max(ans, cntin + cntout); &#125; cout &lt;&lt; ans &lt;&lt; endl; &#125; return 0;&#125;","permalink":"http://yoursite.com/2020/04/15/codeforces-round-633-div-2-round-634-div-3%20round%20635%20div.2%E5%9B%9E%E9%A1%BE/","photos":[]},{"tags":[{"name":"数论","slug":"数论","permalink":"http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"}],"title":"同余","date":"2020/04/13","text":"最近一次的周赛中暴露了同余逆元的短板，连板子都不会用，哎，只能加紧补了 定义如果a,b对正整数n的余数相等，那么a≡b(mod n) 同余类和剩余类对于所有a∈ [0,m-1], 集合 {a+km}对于m同余，该集合称为一个m的同类余，一个模m的同类余一共有{0,1,…..m-1}共m个，被称为完全剩余系 完全剩余系中与m互质的同类余有φ(m)个，被称为m的简化剩余系，简化剩余系的积也是m的简化剩余系 费马小定理若p是质数，则对于任意正整数a，有a^p≡a(mod p) 欧拉定理若正整数 a,n互质，那么a^φ(n)≡1(mod n),其中φ(n)是欧拉函数(不超过n的简化剩余系元素) 推论： 若正整数a ,n互质,对于任意正整数b， 有: a^b≡a^(b mod φ(n)) (mod n) 这些定理的证明链接：https://www.cnblogs.com/zylAK/p/9569668.html 快速幂取余的板子： 1234567891011LL mod(LL a,LL b,LL mod)&#123; LL ans=1; a%=mod; while(b)&#123; if(b&amp;1) //b==1 ans=ans*a%mod； a=a*a%mod; b&gt;&gt;=1; &#125; return ans;&#125; 特别情况：当a，n不一定互质的且b&gt;φ(n)情况下，可以有： a^b≡a^(b modφ(n)+φ(n)) (mod n) 例题：POJ3696 最近发现欧拉定理的拓展不能用在快速幂板子，会导致答案错误，是一把双刃剑 拓展欧几里得算法某打不出名字的定理： 对于任意整数a,b,存在一对整数x,y,满足 ax+by == gcd(a,b) 代码实现 123456int exgcd(int a,int b,int &amp;x,int &amp;y)&#123; if(b==0) &#123; x=1,y=0; return a;&#125; int d=exgcd(b,a%b,x,y); int z=x; x=y; y=z-y*(a/b); return d;&#125; 乘法逆元若整数 b,m互质，并且 b|a，则存在一个整数x，使得a/b≡a*x(mod m),则x称为b的模m乘法逆元，记为b ^-1(mod m) 当模数m为质数时，b^m-2即为b的乘法逆元","permalink":"http://yoursite.com/2020/04/13/%E5%90%8C%E4%BD%99/","photos":[]},{"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"}],"title":"单调栈问题：寻找最大矩形面积","date":"2020/04/12","text":"题意：求若干个相邻矩形并集内部所能找到的最大矩形面积 链接：POJ2559 1234567891011121314a[n+1]=p=0;for(int i=1;i&lt;=n+1;i++)&#123; if(a[i]&gt;s[p]) s[++p]=a[i],w[p]=1; else&#123; int width=0; while(s[p]&gt;a[i])&#123; width+=w[p]; ans=max(ans,(long long)width*s[p]); p--; &#125; s[++p]=a[i],w[p]=width+1; &#125;&#125;","permalink":"http://yoursite.com/2020/04/12/%E5%8D%95%E8%B0%83%E6%A0%88%E9%97%AE%E9%A2%98%EF%BC%9A%E5%AF%BB%E6%89%BE%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF/","photos":[]},{"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://yoursite.com/tags/codeforces/"}],"title":"codeforces edu round 85 A-D","date":"2020/04/11","text":"昨晚的比赛并没有参加，但是今天早上参考大佬的代码，花时间把前面相对简单的四题给补了 链接https://codeforces.com/contest/1334 A题意思是进行一场游戏，会显示游戏次数和成功次数，由题意可知，游戏次数必定大于成功次数，然后问显示的数据是真是假，用几个条件判断一下就好了 123456789101112131415161718192021int main()&#123; cin&gt;&gt;n; while(n--)&#123; int flag=1,m1=0,m2=0; cin&gt;&gt;m; for(int i=1;i&lt;=m;i++)&#123; cin&gt;&gt;a[i]&gt;&gt;b[i]; &#125; for(int i=1;i&lt;=m;i++)&#123; if(m1&gt;a[i]||m2&gt;b[i]||a[i]&lt;b[i]||b[i]-m2&gt;a[i]-m1)&#123; flag=0; break; &#125; m1=a[i],m2=b[i]; &#125; if(flag) cout&lt;&lt;\"YES\"&lt;&lt;endl; else cout&lt;&lt;\"NO\"&lt;&lt;endl; &#125;&#125; B题题意：从一个序列里面随机抽取几个元素，使得这几个元素元素的平均数大于或等于目标值，问最多能抽取几个元素 首先排序(最大的在前面)，然后sum从左往右遍历，求和，如果一直满足条件ans++; 12345678910111213141516171819const int N=101000;int n,x,a[N],_;int main() &#123; for (scanf(\"%d\",&amp;_);_;_--) &#123; //这里使用scanf()函数对_进行赋值，然后直接_--，太骚了 scanf(\"%d%d\",&amp;n,&amp;x); rep(i,0,n) scanf(\"%d\",a+i); sort(a,a+n); reverse(a,a+n); //大佬的代码简洁，不写cmd，直接reverse满足 int ans=0; ll s=0; rep(i,0,n) &#123; s+=a[i]; if (s&gt;=(ll)(i+1)*x) ans=i+1; &#125; printf(\"%d\\n\",ans); &#125;&#125; C题题意：有一群怪物将作者围在中间，每个怪物分别拥有生命值和爆炸值两个数值，怪物死亡时会爆炸，对下一个怪物造成自己爆炸值数值的伤害(如果是最后一个，那么就是第一个，因为围成了圈)，求最低造成多少伤害，就能够将所有的怪物清除。 分析：对下一个怪物的伤害不会超过下一个怪物的生命值，所以杀死一个怪物的代价应该是 penalty=min(0,a[i]-b[i+n-1%n]) (前面的一个怪物已经被引爆的情况) 原本我是想用优先队列来写的，计算一个怪物的生命值和爆炸最多能对下一个怪物造成的伤害之和为序不停从堆中抽取，后来发现实际上怪物的生命值是动态的，不能用静态的生命值来算，只能作罢。看了别人的代码，才恍然大悟，这是一道贪心题，但是计算的应该是消灭一个怪物所要付出的代价而不是所能造成的最大化伤害。 123456789101112131415161718int _,n;ll extra[N],a[N],b[N];int main() &#123; for (scanf(\"%d\",&amp;_);_;_--) &#123; scanf(\"%d\",&amp;n); rep(i,0,n) scanf(\"%lld%lld\",a+i,b+i); ll s=0,d=1ll&lt;&lt;60;; rep(i,0,n) &#123; extra[i]=max(0ll,a[i]-b[(i+n-1)%n]); //这里计算在总生命值量和总爆炸伤害量已知的情况下，杀死一个怪物的代价 s+=extra[i]; // printf(\"%d %lld\\n\",i,extra[i]); &#125; rep(i,0,n) d=min(d,s-extra[i]+a[i]);//找到杀死一头怪物所要付出的最小代价 printf(\"%lld\\n\",d); &#125;&#125; 反思：刚开始我想岔是因为没有考虑到整体，而是盲目的从局部性价比最优的方式来计算，实际上从整体生命值和总体爆炸伤害值来看，如果我们选择不同的突破口，那么有一部分代价是完全逃避不了的，因为你如果不动它，那么上一个怪物的伤害值是无论如何都不可能杀死他的，我们只能做到第一步就找到代价最小的方式来减少损失 D题题意：有n个点，从1到 n ,再从 n 到1，任意两点之间都存在两条有向边，要求找到从1到n再回到n,经过且不重复经过每一条边，最小的字典序方案，给出字典序方案中从 l 位到 r 位的序列号 这道题为贪心和图论的结合，想到解决方法并不难，但是想要用代码实现感觉让人头大,感觉没有特定的板子啊，这是我看到的解法 123456789101112131415161718 int calc(ll x) &#123; if (x&gt;s[n-1]) return 1; auto a=lower_bound(s+1,s+n,x)-s; int b=x-s[a-1]; if (b%2==1) return a; else return b/2+a;&#125; int main() &#123; for (scanf(\"%d\",&amp;_);_;_--) &#123; scanf(\"%d%lld%lld\",&amp;n,&amp;l,&amp;r); rep(i,1,n+1) s[i]=s[i-1]+2*(n-i); for (ll i=l;i&lt;=r;i++) printf(\"%d \",calc(i)); puts(\"\");//换行 &#125;&#125;","permalink":"http://yoursite.com/2020/04/11/codeforces-edu-round-85-A-D/","photos":[]},{"tags":[{"name":"图论","slug":"图论","permalink":"http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"}],"title":"如何储存路径元素","date":"2020/04/10","text":"最短路路径题目链接：POJ1734 无向图无向图使用floyd，最小环长度应该是： min( 1&lt;= i&lt; j &lt; k) {d[i,j] + a[i,k] + a[k,j]} 1234567891011121314151617181920212223242526272829303132333435363738394041const int N=310;int a[N][N],d[N][N],pos[N][N];int n,m,ans=0x3f3f3f3f;vector&lt;int&gt; path;void get_path(int x,int y)&#123; if(!pos[x][y]) return; get_path(x,pos[x][y]); path,push_back(pos[x][y]); get_path(pos[x][y],y);&#125;int main()&#123; cin&gt;&gt;n&gt;&gt;m; memset(a,0x3f,sizeof a); for(int i=1;i&lt;=n;i++) a[i][i]=0; for(int i=1;i&lt;=m;i++)&#123; int x,y,z; cin&gt;&gt;x&gt;&gt;y&gt;&gt;z; a[y][x]=a[x][y]=min(a[x][y],z); &#125; memcpy(d,a,sizeof a); //这波很骚； for(int k=1;ik&lt;=n;k++)&#123; for(int i=1;i&lt;ki++) for(int j=i+1;j&lt;k;j++) if(d[i][j]+a[i][k]+a[k][j]&lt;ans)&#123; ans=d[i][j]+a[i][k]+a[k][j]; path.clear(); path.push_back(i); get_path(i,j); path.push_back(j); path.push_back(k); &#125; for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) if(d[i][j]&gt;d[i][k]+d[k][j])&#123; d[i][j]=d[i][k]+d[k][j]; pos[i][j]=k; &#125; &#125; ....&#125; 上面的代码使用了pos[i] [j]这个矩阵存储了两个点之间的中间路径，同时get_back函数通过递归调用再次得出i与k,k与j之间的关系，但是注意，这个方法只能存储最短路的路径，不能存储所有的路径。。。 有向图有向图使用二分堆优化的dijkstra,同样是使用pos存储中间节点，方法：枚举1-n之间的起点s,从s开始出堆，但是s出堆之后立刻将d[s]设置为无穷大，这样子s第二次入堆时得到的就是最小有向环","permalink":"http://yoursite.com/2020/04/10/%E5%A6%82%E4%BD%95%E5%82%A8%E5%AD%98%E8%B7%AF%E5%BE%84%E5%85%83%E7%B4%A0/","photos":[]},{"tags":[{"name":"图论","slug":"图论","permalink":"http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"}],"title":"（图论初学）bellman-ford和SPFA","date":"2020/04/10","text":"bellman-ford流程： 扫描所有的边(x,y,z),如果dist[y]&gt; dist[x]+z,更新dist[y] 重复以上步骤，直到没有更新步骤发生 复杂度O(nm),特别复杂，甚至不如使用邻接矩阵的dijkstra SPFA: 建立一个队列，最初队列中只有起点1 取出队头节点下x,扫描x的所有出边(x,y,z),如果dist[y]&gt;dist[x]+z，则更新dist[y],同时如果y不在队中，那么使y入队 重复上面步骤，直到队列为空 这个方法的最终目的就是通过便利使得所有的dist[y]&lt;=dist[x]+z成立。复杂度取决于给出的图，如果类似于矩阵，那么结果还是会变成O(nm),谨慎使用 1234567891011121314151617181920queue(int) q;void SPFA()&#123; d[1]=0,v[1]=1; q.push(1); while(q.size())&#123; int x=q.front(); q.pop(); v[x]=0; for(int i=head[x];i;i=next[i])&#123; int y=ver[i],x=edge[i]; if(d[y]&gt;d[x]+z)&#123; d[y]=d[x]+z; if(!v[x]) q.push(y),v[y]=1; &#125; &#125; &#125;&#125;int main()&#123; ... SPFA();&#125; 但是该方法对于边权存在为负数的边同样适用。 并且，如果不存在边权为负数的边，那么同样可以使用priority_queue对其进行优化，同样可以得到O(mlogn)的时间复杂度","permalink":"http://yoursite.com/2020/04/10/%EF%BC%88%E5%9B%BE%E8%AE%BA%E5%88%9D%E5%AD%A6%EF%BC%89bellman-ford%E5%92%8CSPFA/","photos":[]},{"tags":[{"name":"图论","slug":"图论","permalink":"http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"}],"title":"（图论初学）邻接矩阵和邻接表","date":"2020/04/10","text":"对于有向图和无向图（当作有向图来处理），都有两周储存的方式，分别是邻接矩阵或邻接表。 邻接矩阵：就是二位数组，对于任意a [i] [j],如果i==j,那么a ij的值为零，如果a[i] [j]存在，那么值为w[i] [j],如果不存在，那么值为无穷大。空间复杂度n^2。 邻接链表：含有四个数组，分别为长度为n(头节点数量)的head,长度为m(所有路径数量)ver（记录终边），edge（记录边权），next（记录下一条边的位置）。空间复杂度n+m。 插入和遍历代码： 1234567891011//插入有向边(x,y,z)void add(int x,int y,int z)&#123; ver[++tot]=y,edge[tot]=z; next[tot]=head[x],head[x]=tot; //注意这一步，由于是将前面的head[x]给了后面的next[tot],所以遍历的时候是从后面到前面的&#125;//遍历所有x出发的有向边for(int i=head[x];i;i=next[i])&#123; //这里面的i如果为0.结束循环 int y=ver[i],x=ver[i];&#125;","permalink":"http://yoursite.com/2020/04/10/%EF%BC%88%E5%9B%BE%E8%AE%BA%E5%88%9D%E5%AD%A6%EF%BC%89%E9%82%BB%E6%8E%A5%E7%9F%A9%E9%98%B5%E5%92%8C%E9%82%BB%E6%8E%A5%E8%A1%A8/","photos":[]},{"tags":[{"name":"codeforces","slug":"codeforces","permalink":"http://yoursite.com/tags/codeforces/"}],"title":"codeforces round 632 Div.2回顾","date":"2020/04/09","text":"这次的参加人数特别多，大概是新冠肺炎影响居家人数增多吧。题目按照LPT和KEVIN大佬的说法，特别水，但是我还是和之前差不多的结果，看来我的水分拧都拧不干了。。。大哭QAQ 比赛链接 https://codeforces.com/contest/1333 A题一如既往，不是很难，拼的是手速和灵光，题面看起来很复杂，意思是两种方块在给定的方形大小内镶嵌，如果一块方块四个方向中存在有另一种方块，那么可以使得所属种类数加一，对另一种方块亦然，要求是B类方块是W类方块数+1，这样的话只需在左上角放一块W，其余全部放B即可，这样数量刚好为2=1+1. 12345678910111213141516171819202122232425#include&lt;bits/stdc++.h&gt;using namespace std;typedef long long ll;int main()&#123; int t; cin&gt;&gt;t; int m,n; while(t--)&#123; cin&gt;&gt;m&gt;&gt;n; for(int i=1;i&lt;=m;i++) &#123; for(int j=1;j&lt;=n;j++)&#123; if(i==1&amp;&amp;j==1)&#123; cout&lt;&lt;'W'; &#125; else&#123; cout&lt;&lt;'B'; &#125; &#125; cout&lt;&lt;endl; &#125;&#125; return 0;&#125; B题给定上下两个序列，上面一个序列可以进行一种运算: 对任意i &lt; j ,可以使得aj = ai+aj 要求是能否通过这种运算使得上面的数列等于下面的，其实就是找上面数列的1和-1的位置，再和每一位进行比对。 1234567891011121314151617181920212223242526272829303132333435363738#include&lt;bits/stdc++.h&gt;#define mod 1000000007#define mod9 998244353typedef unsigned long long ull;typedef long long ll;typedef double db;typedef long double ld;const db eps=1e-10;const int INF = 0x3f3f3f3f;const ll inf=0x3f3f3f3f3f3f3f3f;const int N=1e5+7;using namespace std;int t,n,m,k=0;int a[N]=&#123;0&#125;,b[N]=&#123;0&#125;;int main()&#123; while(~scanf(\"%d\",&amp;t))&#123; while(t--)&#123; int flag=0; int vis[3]=&#123;0&#125;; scanf(\"%d\",&amp;n); for(int i=0;i&lt;n;i++)&#123; scanf(\"%d\",&amp;a[i]); &#125; for(int i=0;i&lt;n;i++)&#123; scanf(\"%d\",&amp;b[i]); if(b[i]&gt;a[i]&amp;&amp;vis[0]==0) flag=1; if(b[i]&lt;a[i]&amp;&amp;vis[1]==0) flag=1; if(a[i]==1) vis[0]=1; if(a[i]==-1) vis[1]=1; &#125; if(flag) cout&lt;&lt;\"NO\"&lt;&lt;endl; else cout&lt;&lt;\"YES\"&lt;&lt;endl; &#125; &#125; return 0;&#125; C题题意给定一个序列，只能从左端或者右端截取一段走形成新的子序列，不存在可以从中间直接拿取（我就理解错了），所以这样子算来实际的序列数量是1+2+…..n，即 (n+1)*n/2 ,只要子序列中任意一个存在和为零的情况，那么这个序列就不符合要求，结果求得是符合要求的序列的数量，刚开始我还以为是一个求子序列和的问题，没有特别多的思路就选择做了后面的题目，毕竟2^n难以处理，结果因为传达了错误的题意还坑了和自己的一起写的大佬（捂脸） 处理：由于其子序列取得方式，我们可以推理，假设一个序列和为零，那么其右端所有序列（即母序列）也不符合要求，进一步想，我们会发现，假设从左往右计数求和sum，如果sum的值出现了两次，那么说明中间一段必定为和为零的序列，所以可以使用map记录下每个sum出现的最新位置，如果出现了重复的sum,就对其右边的母序列进行清除。不用注意重复子序列。 1234567891011121314151617181920212223242526272829#include&lt;bits/stdc++.h&gt;typedef long long ll;const ll mod=1e9+7;const ll N=2e5+5;const ll M=2e4+5;const double eps=1e-7;using namespace std;int a[N];map&lt;long,long&gt;mp;int main()&#123; ll ans=0,n,sum=0,cnt=-1; cin&gt;&gt;n; for(ll i=1;i&lt;=n;i++) cin&gt;&gt;a[i]; mp[0]=1; //这里设置成1，避免首元素就是0的情况 for(ll i=1;i&lt;=n;i++) &#123; sum+=a[i]; if(mp.count(sum))&#123; cnt=max(cnt,mp[sum]); &#125; ans+=i-cnt; mp[sum]=i+1; //这里设置成i+1,剪掉0子序列的首元素 &#125; cout&lt;&lt;ans&lt;&lt;endl; return 0;&#125; D题将序列当中全部向左转的跳到左边，右转的调到右边，这里看到了一位学长的代码，非常熟练地使用了各种STL，我从中学到了很多新的东西，比如范围for循环 12vector&lt;type&gt; k;for(auto n:k) cout&lt;&lt;n; 题解如下： 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;stdio.h&gt;#include&lt;algorithm&gt;#include &lt;string.h&gt;#include &lt;queue&gt;#include&lt;vector&gt;using namespace std;const int N = 2e5+5;typedef long long ll;char a[N];int main()&#123; int n,m,i,j,k,t=0; scanf(\"%d %d\",&amp;n,&amp;k); scanf(\"%s\",a+1); int sum = 0; vector&lt;vector&lt;int&gt; &gt;q; q.clear(); int ans = 0; while(1)&#123; bool flag = true; vector&lt;int&gt; p; p.clear(); for(i=1;i&lt;n;i++)&#123; if(a[i]=='R'&amp;&amp;a[i+1]=='L') p.push_back(i++),swap(a[i],a[i-1]), flag=false,sum++; &#125; if(flag) break; q.push_back(p); &#125; if(q.size()&gt;k||sum&lt;k)&#123; printf(\"-1\\n\"); return 0; &#125; for(vector&lt;int&gt; d:q)&#123; printf(\"%d\",d.size()); for(int j:d) printf(\" %d\",j); printf(\"\\n\"); &#125; return 0;&#125;","permalink":"http://yoursite.com/2020/04/09/codeforces-round-632-Div-2%E5%9B%9E%E9%A1%BE/","photos":[]},{"tags":[{"name":"图论","slug":"图论","permalink":"http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"}],"title":"（图论初学）单源最短路径-dijkstra","date":"2020/04/06","text":"目标：寻找起始点到目标点的最短路径，做法，每次扫描最短出边，加入路径。。。 初始化d[1]=0,然后将其余的 distance 全部设置为最大 进行n-1次循环，每次都找最小了distance[x],将x标记 扫描该x的全部出边（x,y,z）,if d[y]&gt;d[x]+z),更新d[y] 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#include&lt;algorithm&gt;#include&lt;iostream&gt;#include&lt;string&gt;#include&lt;cstdlib&gt;#include&lt;cstring&gt;using namespace std;const int maxn=105;const int INF=0x3f3f3f3f;int d[maxn],a[maxn][maxn],v[maxn],ans,m;void search()&#123; memset(v,0,sizeof v); for(int i=1;i&lt;m;i++)&#123; int x=0; for(int j=1;j&lt;=m;j++)&#123; if(!v[j]&amp;&amp;(x==0||d[j]&lt;d[x])) x=j; &#125; v[x]=1; for(int j=1;j&lt;=m;j++)&#123; d[j]=min(d[j],d[x]+a[x][j]); &#125; &#125;&#125;int main()&#123; cin&gt;&gt;m; string s; for(int i=1;i&lt;=m;i++)&#123; a[i][i]=0; &#125; for(int i=2;i&lt;=m;i++)&#123; for(int j=1;j&lt;i;j++)&#123; cin&gt;&gt;s; if(s==\"x\")&#123; a[i][j]=a[j][i]=INF; &#125; else&#123; int n=0; for(int k=0;k&lt;s.size();k++)&#123; n=n*10+s[k]-'0'; &#125; a[i][j]=a[j][i]=n; &#125; &#125; &#125; for(int i=2;i&lt;=m;i++)&#123; d[i]=INF; &#125; d[1]=0; search(); ans=0; for(int i=1;i&lt;=m;i++)&#123; ans=max(d[i],ans); &#125; cout&lt;&lt;ans&lt;&lt;endl;&#125; 时间复杂度O(n^2)，主要复杂度来自第一步对全局最小值的寻找，适用于求单源路径. 下面是使用二叉树堆对dist进行维护之后，可以在O(mlogn)的时间内实现dijkstra: 12345678910111213141516171819202122232425262728293031323334353637383940const int N=10010,M=100010;int head[N],ver[M],edge[M],next[M],d[N];bool v[N];int n,m,tot;priority_queue&lt;pair&lt;int,int&gt;&gt; q;//注意这里的key值是dist值的相反数，因为要选取最小值，第二个值为对应的节点编号void add(int x,int y,int z)&#123; ver[++tot]=y,edge[tot]=z; next[tot]=head[x],head[x]=tot;&#125;void dijkstra()&#123; memset(v,0,sizeof(v)); memset(d,0,sizeof(d)); d[1]=0; q.push(make_pair(0,1)); while(q.size())&#123; int x=q.top().second,q.pop(); if(v[x]) continue; v[x]=1; for(int i=head[x],i;i=next[i])&#123; int y=ver[i],z=edge[i]; if(d[y]&gt;d[x]+z)&#123; d[y]=d[x]+z; q.push(make_pair(-d[y],y)); &#125; &#125; &#125;&#125;int main()&#123; cin&gt;&gt;n&gt;&gt;m; for(int i=1;i&lt;=m;i++)&#123; int x,y,z; cin&gt;&gt;x&gt;&gt;y&gt;&gt;z; add(x,y,z); &#125; dijkstra(); for(int i=1;i&lt;=n;i++)&#123; cout&lt;&lt;d[i]&lt;&lt;endl; &#125;&#125;","permalink":"http://yoursite.com/2020/04/06/%EF%BC%88%E5%9B%BE%E8%AE%BA%E5%88%9D%E5%AD%A6%EF%BC%89%E5%8D%95%E6%BA%90%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84-dijkstra/","photos":[]},{"tags":[{"name":"图论","slug":"图论","permalink":"http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"}],"title":"（图论初学）两点间无向最短路径 floyd","date":"2020/04/06","text":"floyd主要是使用了dp的思想，最主要的疑惑恐怕是i，j，k三个变量的位置为何不可变化 如果想要了解内部缘由不妨移步：为什么k要放在最外层 设D[k,i,j]表示经过若干个编号不超过k的结点从i到j的最短路径长度,可划分为子问题，经过编号不超过k-1从i到j,或者先从i到k,再到j。 得到公式： D[k,i,j,]=min(D[k-1,i,j],D[k-1,i,k]+D[k-1,k,j]) 可以转化为：D[i,j]=min(D[i,j],D[i,k]+D[k,j]) 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152#include&lt;iostream&gt;#include&lt;cstring&gt;#include&lt;algorithm&gt;using namespace std;const int maxn=305,INF=0x3f3f3f3f;int d[maxn][maxn];int a[maxn];int n,m;void init()&#123; for(int i=0;i&lt;maxn;i++) for(int j=0;j&lt;maxn;j++) if(i==j) d[i][j]=0; else d[i][j]=INF;&#125;void floyd(void)&#123; //floyd的状态转移方程：d[k][i][j]=min(d[k-1][i][j],d[k-1][i][k]+d[k-1][k][j]),可以转换成三重循环的。。 for(int k=1;k&lt;=n;k++) //最外层循环是为了找到能不能有其他点帮助目标点完成最短路。。。 for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) d[i][j]=min(d[i][j],d[i][k]+d[k][j]); &#125;int main()&#123; cin&gt;&gt;n&gt;&gt;m; init(); while(m--) &#123; int k; cin&gt;&gt;k; for(int i=0;i&lt;k;i++) &#123; cin&gt;&gt;a[i]; &#125; for(int i=0;i&lt;k;i++) for(int j=i+1;j&lt;k;j++) d[a[i]][a[j]]=d[a[j]][a[i]]=1; &#125; floyd(); int ans=INF; for(int i=1;i&lt;=n;i++) &#123; int sum=0; for(int j=1;j&lt;=n;j++) sum+=d[i][j]; ans=min(ans,sum); &#125; cout&lt;&lt;ans*100/(n-1)&lt;&lt;endl; return 0;&#125; 传递闭包：传递推导尽量多的元素之间的关系(感觉并查集也能解决相等的关系，但是大于小于不行) 1234for(int k=1;k&lt;=n;k++) for(int i=1;i&lt;=n;i++) for(int j=1;j&lt;=n;j++) d[i][j]|=d[i][k]&amp;d[k][j];","permalink":"http://yoursite.com/2020/04/06/%EF%BC%88%E5%9B%BE%E8%AE%BA%E5%88%9D%E5%AD%A6%EF%BC%89%E5%8D%95%E6%BA%90%E6%97%A0%E5%90%91%E8%B7%AF%E5%BE%84-floyed/","photos":[]}],"categories":[],"tags":[{"name":"数据结构","slug":"数据结构","permalink":"http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"},{"name":"codeforces","slug":"codeforces","permalink":"http://yoursite.com/tags/codeforces/"},{"name":"数论","slug":"数论","permalink":"http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"},{"name":"图论","slug":"图论","permalink":"http://yoursite.com/tags/%E5%9B%BE%E8%AE%BA/"}]}